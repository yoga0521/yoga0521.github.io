<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yoga&#39;s blog</title>
  
  <subtitle>you do what you love and fuck the rest.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-26T13:24:43.072Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yoga</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Eureka</title>
    <link href="http://yoursite.com/2018/04/14/Eureka-Client/"/>
    <id>http://yoursite.com/2018/04/14/Eureka-Client/</id>
    <published>2018-04-13T16:19:14.000Z</published>
    <updated>2018-04-26T13:24:43.072Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
      <category term="SpringCloud" scheme="http://yoursite.com/categories/Spring/SpringCloud/"/>
    
      <category term="Eureka" scheme="http://yoursite.com/categories/Spring/SpringCloud/Eureka/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="SpringCloud" scheme="http://yoursite.com/tags/SpringCloud/"/>
    
      <category term="微服务" scheme="http://yoursite.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/04/13/eureka/"/>
    <id>http://yoursite.com/2018/04/13/eureka/</id>
    <published>2018-04-13T15:19:11.239Z</published>
    <updated>2018-04-13T15:21:57.249Z</updated>
    
    <content type="html"><![CDATA[<p>tip: region和zone（或者Availability Zone）均是AWS的概念。在非AWS环境下，我们可以简单地将region理解为Eureka集群，zone理解成机房。Spring Cloud中默认的region是us-east-1 。</p><a id="more"></a><p>我们在将一个普通的Spring Boot应用注册到Eureka Server中，或是从Eureka Server中获取服务列表时，主要就做了两件事：</p><ul><li>在应用主类中配置了<code>@EnableDiscoveryClient</code>注解</li><li>在<code>application.properties</code>中用<code>eureka.client.serviceUrl.defaultZone</code>参数指定了服务注册中心的位置</li></ul><h2 id="EnableDiscoveryClient"><a href="#EnableDiscoveryClient" class="headerlink" title="@EnableDiscoveryClient"></a>@EnableDiscoveryClient</h2><p>我们先查看<code>@EnableDiscoveryClient</code>的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;EnableDiscoveryClientImportSelector.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableDiscoveryClient &#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">autoRegister</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DiscoveryClient"><a href="#DiscoveryClient" class="headerlink" title="DiscoveryClient"></a>DiscoveryClient</h2><p><img src="https://i.loli.net/2018/02/09/5a7d47e6c379c.png" alt="eurekaclient.png"></p><p>在具体研究Eureka Client具体负责的任务之前，我们先看看对Eureka Server的URL列表配置在哪里。</p><p><code>EndpointUtils</code>-&gt;<code>getServiceUrlsMapFromConfig</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; getServiceUrlsMapFromConfig(EurekaClientConfig clientConfig, String instanceZone, <span class="keyword">boolean</span> preferSameZone) &#123;</span><br><span class="line">    Map&lt;String, List&lt;String&gt;&gt; orderedUrls = <span class="keyword">new</span> LinkedHashMap();</span><br><span class="line">    String region = getRegion(clientConfig);<span class="comment">//获取region</span></span><br><span class="line">    String[] availZones = clientConfig.getAvailabilityZones(clientConfig.getRegion());<span class="comment">//获取region中的所有zone</span></span><br><span class="line">    <span class="keyword">if</span> (availZones == <span class="keyword">null</span> || availZones.length == <span class="number">0</span>) &#123;</span><br><span class="line">        availZones = <span class="keyword">new</span> String[]&#123;<span class="string">"default"</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    logger.debug(<span class="string">"The availability zone for the given region &#123;&#125; are &#123;&#125;"</span>, region, Arrays.toString(availZones));</span><br><span class="line">    <span class="keyword">int</span> myZoneOffset = getZoneOffset(instanceZone, preferSameZone, availZones);<span class="comment">//获取实例zone的位置</span></span><br><span class="line">    String zone = availZones[myZoneOffset];<span class="comment">//获取zone</span></span><br><span class="line">    List&lt;String&gt; serviceUrls = clientConfig.getEurekaServerServiceUrls(zone);<span class="comment">//获取zone中的所有serviceUrl</span></span><br><span class="line">    <span class="keyword">if</span> (serviceUrls != <span class="keyword">null</span>) &#123;</span><br><span class="line">        orderedUrls.put(zone, serviceUrls);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> currentOffset = myZoneOffset == availZones.length - <span class="number">1</span> ? <span class="number">0</span> : myZoneOffset + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(currentOffset != myZoneOffset) &#123;<span class="comment">//循环遍历所有zone，获取serviceUrls</span></span><br><span class="line">        zone = availZones[currentOffset];</span><br><span class="line">        serviceUrls = clientConfig.getEurekaServerServiceUrls(zone);</span><br><span class="line">        <span class="keyword">if</span> (serviceUrls != <span class="keyword">null</span>) &#123;</span><br><span class="line">            orderedUrls.put(zone, serviceUrls);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (currentOffset == availZones.length - <span class="number">1</span>) &#123;</span><br><span class="line">            currentOffset = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ++currentOffset;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (orderedUrls.size() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"DiscoveryClient: invalid serviceUrl specified!"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> orderedUrls;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Region</code>,<code>Zone</code></p><p>在上面函数中，我们发现客户端依次加载了两个内容，一个是<code>Region</code>，一个是<code>Zone</code>，从其加载逻辑上我们可以看出他们的关系：</p><ul><li>通过<code>getRegion</code>函数，我们可以看到它从配置中读取了一个Region返回，所以一个微服务应用只可以属于一个Region，如果不特别配置，就默认为<code>us-east-1</code>。若我们要自己设置，可以通过<code>eureka.client.region</code>属性来定义</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getRegion</span><span class="params">(EurekaClientConfig clientConfig)</span> </span>&#123;</span><br><span class="line">    String region = clientConfig.getRegion();</span><br><span class="line">    <span class="keyword">if</span> (region == <span class="keyword">null</span>) &#123;</span><br><span class="line">        region = <span class="string">"default"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    region = region.trim().toLowerCase();</span><br><span class="line">    <span class="keyword">return</span> region;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过<code>EurekaClientConfigBean</code>的<code>getAvailabilityZones</code>方法来获取Zone，<code>EurekaClientConfigBean</code>类是<code>EurekaClientConfig</code>和<code>EurekaConstants</code>接口的实现，用来加载配置文件中的内容，这里有非常多有用的信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] getAvailabilityZones(String region) &#123;</span><br><span class="line">    String value = (String)<span class="keyword">this</span>.availabilityZones.get(region);</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">        value = <span class="string">"defaultZone"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> value.split(<span class="string">","</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>serviceUrls</code></p><p>在获取了Region和Zone信息之后，才开始真正加载Eureka Server的具体地址。它根据传入的参数按一定算法确定加载位于哪一个Zone配置的serviceUrls。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> myZoneOffset = getZoneOffset(instanceZone, preferSameZone, availZones);</span><br><span class="line">String zone = availZones[myZoneOffset];</span><br><span class="line">List&lt;String&gt; serviceUrls = clientConfig.getEurekaServerServiceUrls(zone);</span><br></pre></td></tr></table></figure><p><code>EurekaClientConfigBean</code>的<code>getEurekaServerServiceUrls</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getEurekaServerServiceUrls</span><span class="params">(String myZone)</span> </span>&#123;</span><br><span class="line">    String serviceUrls = (String)<span class="keyword">this</span>.serviceUrl.get(myZone);<span class="comment">//获取zone中的serviceUrls</span></span><br><span class="line">    <span class="keyword">if</span> (serviceUrls == <span class="keyword">null</span> || serviceUrls.isEmpty()) &#123;<span class="comment">//为空的话，获取defaultZone中的serviceUrls</span></span><br><span class="line">        serviceUrls = (String)<span class="keyword">this</span>.serviceUrl.get(<span class="string">"defaultZone"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(serviceUrls)) &#123;</span><br><span class="line">        String[] serviceUrlsSplit = StringUtils.commaDelimitedListToStringArray(serviceUrls);<span class="comment">//将serviceUrls用,分割</span></span><br><span class="line">        List&lt;String&gt; eurekaServiceUrls = <span class="keyword">new</span> ArrayList(serviceUrlsSplit.length);</span><br><span class="line">        String[] var5 = serviceUrlsSplit;</span><br><span class="line">        <span class="keyword">int</span> var6 = serviceUrlsSplit.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> var7 = <span class="number">0</span>; var7 &lt; var6; ++var7) &#123;</span><br><span class="line">            String eurekaServiceUrl = var5[var7];</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.endsWithSlash(eurekaServiceUrl)) &#123;<span class="comment">//如果url结尾不是/，就添加/</span></span><br><span class="line">                eurekaServiceUrl = eurekaServiceUrl + <span class="string">"/"</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            eurekaServiceUrls.add(eurekaServiceUrl);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> eurekaServiceUrls;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当客户端在服务列表中选择实例进行访问时，对于Zone和Region遵循这样的规则：优先访问同自己一个Zone中的实例，其次才访问其他Zone中的实例。通过Region和Zone的两层级别定义，配合实际部署的物理结构，我们就可以有效的设计出区域性故障的容错集群。</p><h2 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h2><p>在理解了多个服务注册中心信息的加载后，我们再回头看看<code>DiscoveryClient</code>类是如何实现“服务注册”行为的，其中DiscoveryClient实现了EurekaClient接口，并且它是一个单例模式，而EurekaClient继承了LookupService接口。通过查看它的构造类，可以找到它调用了下面这个函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initScheduledTasks</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> renewalIntervalInSecs;</span><br><span class="line">    <span class="keyword">int</span> expBackOffBound;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.clientConfig.shouldFetchRegistry()) &#123;<span class="comment">//默认为true</span></span><br><span class="line">        renewalIntervalInSecs = <span class="keyword">this</span>.clientConfig.getRegistryFetchIntervalSeconds();<span class="comment">//服务发现时间间隔默认为30</span></span><br><span class="line">        expBackOffBound = <span class="keyword">this</span>.clientConfig.getCacheRefreshExecutorExponentialBackOffBound();<span class="comment">//默认为10</span></span><br><span class="line">        <span class="keyword">this</span>.scheduler.schedule(<span class="keyword">new</span> TimedSupervisorTask(<span class="string">"cacheRefresh"</span>, <span class="keyword">this</span>.scheduler, <span class="keyword">this</span>.cacheRefreshExecutor, renewalIntervalInSecs, TimeUnit.SECONDS, expBackOffBound, <span class="keyword">new</span> DiscoveryClient.CacheRefreshThread()), (<span class="keyword">long</span>)renewalIntervalInSecs, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.clientConfig.shouldRegisterWithEureka()) &#123;<span class="comment">//默认为true</span></span><br><span class="line">        renewalIntervalInSecs = <span class="keyword">this</span>.instanceInfo.getLeaseInfo().getRenewalIntervalInSecs();<span class="comment">//默认为30</span></span><br><span class="line">        expBackOffBound = <span class="keyword">this</span>.clientConfig.getHeartbeatExecutorExponentialBackOffBound();<span class="comment">//默认为10</span></span><br><span class="line">        logger.info(<span class="string">"Starting heartbeat executor: renew interval is: "</span> + renewalIntervalInSecs);</span><br><span class="line">        <span class="keyword">this</span>.scheduler.schedule(<span class="keyword">new</span> TimedSupervisorTask(<span class="string">"heartbeat"</span>, <span class="keyword">this</span>.scheduler, <span class="keyword">this</span>.heartbeatExecutor, renewalIntervalInSecs, TimeUnit.SECONDS, expBackOffBound, <span class="keyword">new</span> DiscoveryClient.HeartbeatThread(<span class="keyword">null</span>)), (<span class="keyword">long</span>)renewalIntervalInSecs, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">this</span>.instanceInfoReplicator = <span class="keyword">new</span> InstanceInfoReplicator(<span class="keyword">this</span>, <span class="keyword">this</span>.instanceInfo, <span class="keyword">this</span>.clientConfig.getInstanceInfoReplicationIntervalSeconds(), <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">this</span>.statusChangeListener = <span class="keyword">new</span> StatusChangeListener() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"statusChangeListener"</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(StatusChangeEvent statusChangeEvent)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (InstanceStatus.DOWN != statusChangeEvent.getStatus() &amp;&amp; InstanceStatus.DOWN != statusChangeEvent.getPreviousStatus()) &#123;</span><br><span class="line">                    DiscoveryClient.logger.info(<span class="string">"Saw local status change event &#123;&#125;"</span>, statusChangeEvent);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    DiscoveryClient.logger.warn(<span class="string">"Saw local status change event &#123;&#125;"</span>, statusChangeEvent);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                DiscoveryClient.<span class="keyword">this</span>.instanceInfoReplicator.onDemandUpdate();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.clientConfig.shouldOnDemandUpdateStatusChange()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.applicationInfoManager.registerStatusChangeListener(<span class="keyword">this</span>.statusChangeListener);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.instanceInfoReplicator.start(<span class="keyword">this</span>.clientConfig.getInitialInstanceInfoReplicationIntervalSeconds());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        logger.info(<span class="string">"Not registering with Eureka server per configuration"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的函数中，我们可以看到关键的判断依据<code>if (this.clientConfig.shouldRegisterWithEureka())</code>。在该分支内，创建了一个<code>InstanceInfoReplicator</code>类的实例，它会执行一个定时任务，查看该类的<code>run()</code>函数了解该任务做了什么工作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> var6 = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    ScheduledFuture next;</span><br><span class="line">    label53: &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            var6 = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">this</span>.discoveryClient.refreshInstanceInfo();</span><br><span class="line">            Long dirtyTimestamp = <span class="keyword">this</span>.instanceInfo.isDirtyWithTime();</span><br><span class="line">            <span class="keyword">if</span> (dirtyTimestamp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.discoveryClient.register();</span><br><span class="line">                <span class="keyword">this</span>.instanceInfo.unsetIsDirty(dirtyTimestamp);</span><br><span class="line">                var6 = <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                var6 = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span> label53;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var7) &#123;</span><br><span class="line">            logger.warn(<span class="string">"There was a problem with the instance info replicator"</span>, var7);</span><br><span class="line">            var6 = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (var6) &#123;</span><br><span class="line">                ScheduledFuture next = <span class="keyword">this</span>.scheduler.schedule(<span class="keyword">this</span>, (<span class="keyword">long</span>)<span class="keyword">this</span>.replicationIntervalSeconds, TimeUnit.SECONDS);</span><br><span class="line">                <span class="keyword">this</span>.scheduledPeriodicRef.set(next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        next = <span class="keyword">this</span>.scheduler.schedule(<span class="keyword">this</span>, (<span class="keyword">long</span>)<span class="keyword">this</span>.replicationIntervalSeconds, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">this</span>.scheduledPeriodicRef.set(next);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    next = <span class="keyword">this</span>.scheduler.schedule(<span class="keyword">this</span>, (<span class="keyword">long</span>)<span class="keyword">this</span>.replicationIntervalSeconds, TimeUnit.SECONDS);</span><br><span class="line">    <span class="keyword">this</span>.scheduledPeriodicRef.set(next);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相信大家都发现了<code>discoveryClient.register();</code>这一行，真正触发调用注册的地方就在这里。继续查看<code>register()</code>的实现内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">register</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    logger.info(<span class="string">"DiscoveryClient_"</span> + <span class="keyword">this</span>.appPathIdentifier + <span class="string">": registering service..."</span>);</span><br><span class="line"></span><br><span class="line">    EurekaHttpResponse httpResponse;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        httpResponse = <span class="keyword">this</span>.eurekaTransport.registrationClient.register(<span class="keyword">this</span>.instanceInfo);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var3) &#123;</span><br><span class="line">        logger.warn(<span class="string">"&#123;&#125; - registration failed &#123;&#125;"</span>, <span class="keyword">new</span> Object[]&#123;<span class="string">"DiscoveryClient_"</span> + <span class="keyword">this</span>.appPathIdentifier, var3.getMessage(), var3&#125;);</span><br><span class="line">        <span class="keyword">throw</span> var3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">        logger.info(<span class="string">"&#123;&#125; - registration status: &#123;&#125;"</span>, <span class="string">"DiscoveryClient_"</span> + <span class="keyword">this</span>.appPathIdentifier, httpResponse.getStatusCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> httpResponse.getStatusCode() == <span class="number">204</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过属性命名，大家基本也能猜出来，注册操作也是通过REST请求的方式进行的。同时，这里我们也能看到发起注册请求的时候，传入了一个<code>com.netflix.appinfo.InstanceInfo</code>对象，该对象就是注册时候客户端给服务端的服务的元数据。</p><p><code>ApplicationResource</code>-&gt;<code>PeerAwareInstanceRegistryImpl</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;tip: region和zone（或者Availability Zone）均是AWS的概念。在非AWS环境下，我们可以简单地将region理解为Eureka集群，zone理解成机房。Spring Cloud中默认的region是us-east-1 。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
