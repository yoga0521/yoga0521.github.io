<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yoga&#39;s blog</title>
  
  <subtitle>you do what you love and fuck the rest.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yoga0521.github.io/"/>
  <updated>2018-05-19T05:38:09.008Z</updated>
  <id>https://yoga0521.github.io/</id>
  
  <author>
    <name>yoga</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>漏桶算法与令牌桶算法简介</title>
    <link href="https://yoga0521.github.io/2018/03/26/%E6%BC%8F%E6%A1%B6%E7%AE%97%E6%B3%95%E4%B8%8E%E4%BB%A4%E7%89%8C%E6%A1%B6%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B/"/>
    <id>https://yoga0521.github.io/2018/03/26/漏桶算法与令牌桶算法简介/</id>
    <published>2018-03-26T05:05:32.000Z</published>
    <updated>2018-05-19T05:38:09.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们项目中的API接口都是有访问上限的，当访问频率或者并发量超过其承受范围时，我们就必须考虑限流来保证接口的可用性。防止非预期的请求对系统压力过大而引起的系统瘫痪。本篇文章会介绍限流算法中比较常见的漏桶算法和令牌桶算法。</p><a id="more"></a><h2 id="漏桶算法"><a href="#漏桶算法" class="headerlink" title="漏桶算法"></a>漏桶算法</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们项目中的API接口都是有访问上限的，当访问频率或者并发量超过其承受范围时，我们就必须考虑限流来保证接口的可用性。防止非预期的请求对系统压力过大而引起的系统瘫痪。本篇文章会介绍限流算法中比较常见的漏桶算法和令牌桶算法。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://yoga0521.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="限流算法" scheme="https://yoga0521.github.io/tags/%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Eureka源码—EurekaServer</title>
    <link href="https://yoga0521.github.io/2018/03/23/Eureka%E6%BA%90%E7%A0%81%E2%80%94EurekaServer/"/>
    <id>https://yoga0521.github.io/2018/03/23/Eureka源码—EurekaServer/</id>
    <published>2018-03-23T12:14:15.000Z</published>
    <updated>2018-05-19T15:56:00.687Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇文章主要解读Eureka-Server初始化的相关源码，文章较长，请谨慎点击！</p><a id="more"></a><h2 id="EurekaServerConfig"><a href="#EurekaServerConfig" class="headerlink" title="EurekaServerConfig"></a>EurekaServerConfig</h2><h3 id="EurekaServerConfig简介"><a href="#EurekaServerConfig简介" class="headerlink" title="EurekaServerConfig简介"></a>EurekaServerConfig简介</h3><p>所属包：<code>com.netflix.eureka.EurekaSeverConfig</code>，<strong>Eureka-Server配置接口</strong>。</p><h3 id="EurekaServerConfig源码"><a href="#EurekaServerConfig源码" class="headerlink" title="EurekaServerConfig源码"></a>EurekaServerConfig源码</h3><p>博主已添加中文注释，<a href="https://github.com/yoga0521/eureka/blob/master/eureka-core/src/main/java/com/netflix/eureka/EurekaServerConfig.java" target="_blank" rel="noopener">点击查看</a>。</p><h3 id="EurekaServerConfig重要属性或者重要方法"><a href="#EurekaServerConfig重要属性或者重要方法" class="headerlink" title="EurekaServerConfig重要属性或者重要方法"></a>EurekaServerConfig重要属性或者重要方法</h3><ul><li>自我保护相关：<ul><li><code>shouldEnableSelfPreservation()</code>：是否开启自我保护机制，默认为true。</li><li><code>getRenewalPercentThreshold()</code>：自我保护百分比阈值，超过这个值就会开启自我保护模式。默认为0.85。</li><li><code>getRenewalThresholdUpdateIntervalMs（）</code>:自我保护阈值更新的时间间隔，单位为毫秒（ms）。默认为 15 <em> 60 </em> 1000 ms。</li></ul></li><li>注册信息相关：<ul><li><code>getWaitTimeInMsWhenSyncEmpty()</code>：如果eureka在启动的时候，获取不到注册信息，就等待。单位为毫秒（ms）。默认为 1000 <em>  60  </em> 5 ms。</li><li><code>getPeerNodeConnectTimeoutMs()</code>：eureka集群节点之间请求连接超时的时间（进行复制信息操作），单位为毫秒（ms）。默认为 1000 ms。</li><li><code>getPeerNodeReadTimeoutMs()</code>：eureka集群节点之间请求读取超时的时间（进行复制信息操作），单位为毫秒（ms），默认为 5000 ms。</li><li><code>getRetentionTimeInMSInDeltaQueue()</code>：获取增量信息缓存的时间，以避免客户端检索的时候丢失，单位为毫秒。默认为 30 <em> 60 </em> 1000 ms。</li><li><code>getDeltaRetentionTimerIntervalInMs()</code>：获取清理过期的增量信息任务应唤醒的时间间隔，单位为毫秒。默认为 30 * 1000 ms。</li><li><code>shouldDisableDelta()</code>：是否可以将增量信息提供给客户端，默认为false。</li><li><code>shouldSyncWhenTimestampDiffers()</code>：否同步应用实例信息，当应用实例信息最后更新时间戳( lastDirtyTimestamp )发生改变。默认为true。</li><li><code>getRegistrySyncRetries()</code>：获取eureka服务器启动时，从远程 Eureka-Server 读取失败重试次数。默认为5。</li><li><code>getRegistrySyncRetryWaitMs()</code>：Eureka-Server 启动时，从远程 Eureka-Server 读取注册信息失败，再次尝试获取的等待( sleep )间隔，单位为毫秒，默认为30 * 1000 ms。</li><li><code>shouldDisableDeltaForRemoteRegions()</code>：是否将增量信息提供给客户端或远程区域，默认为false。</li><li><code>getRemoteRegionConnectTimeoutMs()</code>：获取连接到远程Eureka-Server的超时时间，单位为毫秒，默认为2000ms。</li><li><code>getRemoteRegionReadTimeoutMs()</code>：获取读取远程Eureka-Server的超时时间，单位为毫秒，默认为5000ms。</li><li><code>getRemoteRegionUrlsWithName()</code>：获取远程Eureka-Server的地址，key为Eureka-server名，value为Eureka-Server地址。</li><li><code>getRemoteRegionAppWhitelist(@Nullable String regionName)</code>：获取远程Eureka-Server获取注册的Applications集合。</li><li><code>getRemoteRegionRegistryFetchInterval()</code>：获取从远程Eureka-Server获取注册信息的时间间隔，单位为秒，默认为30s。</li></ul></li><li>限流相关：<ul><li><code>isRateLimiterEnabled()</code>：是否开启请求限流，默认为false。</li><li><code>isRateLimiterThrottleStandardClients()</code>：是否限制非标准客户端的访问，默认为false。标准客户端通过请求头的 <code>DiscoveryIdentity-Name</code> 来判断，是否在标准客户端名集合里。</li><li><code>getRateLimiterPrivilegedClients()</code>：获取标准客户端名集合。标准客户端名集合。默认包含<code>DefaultClient</code> 和 <code>DefaultServer</code> 。</li><li><code>getRateLimiterBurstSize()</code>：速率限制的burst size，默认为10。令牌桶算法。</li><li><code>getRateLimiterRegistryFetchAverageRate()</code>：指定增量获取注册信息的平均执行注册请求速率，默认为500。</li><li><code>getRateLimiterFullFetchAverageRate()</code>：指定全量获取注册信息的平均执行注册请求速率，默认为100。</li></ul></li><li><code>getEvictionIntervalTimerInMs()</code>：租约过期定时任务执行频率，单位为毫秒。默认为 60 * 1000 ms。</li></ul><h2 id="DefaultEurekaServerConfig"><a href="#DefaultEurekaServerConfig" class="headerlink" title="DefaultEurekaServerConfig"></a>DefaultEurekaServerConfig</h2><h3 id="DefaultEurekaServerConfig-1"><a href="#DefaultEurekaServerConfig-1" class="headerlink" title="DefaultEurekaServerConfig"></a>DefaultEurekaServerConfig</h3><p>所属包：<code>com.netflic.eureka.DefaultEurekaServerConfig</code>，<strong>基于配置文件的Eureka-Server配置实现类</strong>。 </p><h3 id="DefaultEurekaServerConfig源码"><a href="#DefaultEurekaServerConfig源码" class="headerlink" title="DefaultEurekaServerConfig源码"></a>DefaultEurekaServerConfig源码</h3><p>博主已添加中文注释，<a href="https://github.com/yoga0521/eureka/blob/master/eureka-core/src/main/java/com/netflix/eureka/DefaultEurekaServerConfig.java" target="_blank" rel="noopener">点击查看</a>。</p><h3 id="DefaultEurekaServerConfig重要属性或者重要方法"><a href="#DefaultEurekaServerConfig重要属性或者重要方法" class="headerlink" title="DefaultEurekaServerConfig重要属性或者重要方法"></a>DefaultEurekaServerConfig重要属性或者重要方法</h3><ul><li>其他实现方法基本类似，都是从配置文件中获取值，举一个例子：<ul><li><code>shouldEnableSelfPreservation()</code>：是否开启自我保护模式，并传一个默认值（这里是true）。</li></ul></li></ul><h2 id="EurekaBootStrap"><a href="#EurekaBootStrap" class="headerlink" title="EurekaBootStrap"></a>EurekaBootStrap</h2><p><img src="https://raw.githubusercontent.com/yoga0521/picture/master/Eureka/EurekaBootStrap.png" alt="EurekaBootStrap类结构图"></p><h3 id="EurekaBootStrap简介"><a href="#EurekaBootStrap简介" class="headerlink" title="EurekaBootStrap简介"></a>EurekaBootStrap简介</h3><p>所属包：<code>com.netflix.eureka.EurekaBootStrap</code>，<strong>Eureka-Server启动入口</strong>。EurekaBootStrap 实现了 <code>javax.servlet.ServletContextListener</code> 接口，在 Servlet 容器( 例如 Tomcat、Jetty )启动时，调用 <code>contextInitialized()</code> 方法，初始化 Eureka-Server 。源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaBootStrap</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 省略部分代码</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 初始化Eureka配置环境</span></span><br><span class="line">            initEurekaEnvironment();</span><br><span class="line">            <span class="comment">// 初始化Eureka-Server上下文</span></span><br><span class="line">            initEurekaServerContext();</span><br><span class="line"></span><br><span class="line">            ServletContext sc = event.getServletContext();</span><br><span class="line">            sc.setAttribute(EurekaServerContext.class.getName(), serverContext);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            logger.error(<span class="string">"Cannot bootstrap eureka server :"</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Cannot bootstrap eureka server :"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="EurekaBootStrap源码"><a href="#EurekaBootStrap源码" class="headerlink" title="EurekaBootStrap源码"></a>EurekaBootStrap源码</h3><p>博主已添加中文注释，<a href="https://github.com/yoga0521/eureka/blob/master/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap.java" target="_blank" rel="noopener">点击查看</a>。</p><h3 id="EurekaBootStrap重要属性或者重要方法"><a href="#EurekaBootStrap重要属性或者重要方法" class="headerlink" title="EurekaBootStrap重要属性或者重要方法"></a>EurekaBootStrap重要属性或者重要方法</h3><ul><li><p>Eureka-Server上下文相关：</p><ul><li><p><code>com.netflix.eureka.EurekaServerContext</code>：<strong>Eureka-Server上下文接口</strong>，包含了<strong>初始化</strong>，<strong>关闭</strong>，<strong>获取EurekaServer配置对象</strong>，<strong>获取集群节点集合</strong>，<strong>获取编解码器</strong>，<strong>获取应用实例注册表</strong>，<strong>获取应用信息管理器</strong>这些方法。源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EurekaServerContext</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">EurekaServerConfig <span class="title">getServerConfig</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">PeerEurekaNodes <span class="title">getPeerEurekaNodes</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ServerCodecs <span class="title">getServerCodecs</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">PeerAwareInstanceRegistry <span class="title">getRegistry</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ApplicationInfoManager <span class="title">getApplicationInfoManager</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>com.netflix.eureka.DefaultEurekaServerContext</code>：<strong>Eureka-Server上下文默认实现类</strong>，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultEurekaServerContext</span> <span class="keyword">implements</span> <span class="title">EurekaServerContext</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(DefaultEurekaServerContext.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Eureka-Server配置对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> EurekaServerConfig serverConfig;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编解码器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServerCodecs serverCodecs;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 应用实例信息注册表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PeerAwareInstanceRegistry registry;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Eureka-Server集群节点集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PeerEurekaNodes peerEurekaNodes;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 应用信息管理器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ApplicationInfoManager applicationInfoManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultEurekaServerContext</span><span class="params">(EurekaServerConfig serverConfig,</span></span></span><br><span class="line"><span class="function"><span class="params">                               ServerCodecs serverCodecs,</span></span></span><br><span class="line"><span class="function"><span class="params">                               PeerAwareInstanceRegistry registry,</span></span></span><br><span class="line"><span class="function"><span class="params">                               PeerEurekaNodes peerEurekaNodes,</span></span></span><br><span class="line"><span class="function"><span class="params">                               ApplicationInfoManager applicationInfoManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.serverConfig = serverConfig;</span><br><span class="line">        <span class="keyword">this</span>.serverCodecs = serverCodecs;</span><br><span class="line">        <span class="keyword">this</span>.registry = registry;</span><br><span class="line">        <span class="keyword">this</span>.peerEurekaNodes = peerEurekaNodes;</span><br><span class="line">        <span class="keyword">this</span>.applicationInfoManager = applicationInfoManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"Initializing ..."</span>);</span><br><span class="line">        <span class="comment">// 启动Eureka-Server集群节点集合</span></span><br><span class="line">        peerEurekaNodes.start();</span><br><span class="line">        <span class="comment">// 初始化应用实例信息注册表</span></span><br><span class="line">        registry.init(peerEurekaNodes);</span><br><span class="line">        logger.info(<span class="string">"Initialized"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"Shutting down ..."</span>);</span><br><span class="line">        <span class="comment">// 关闭应用实例信息注册表</span></span><br><span class="line">        registry.shutdown();</span><br><span class="line">        <span class="comment">// 关闭Eureka-Server集群节点集合</span></span><br><span class="line">        peerEurekaNodes.shutdown();</span><br><span class="line">        logger.info(<span class="string">"Shut down"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EurekaServerConfig <span class="title">getServerConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> serverConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PeerEurekaNodes <span class="title">getPeerEurekaNodes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> peerEurekaNodes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerCodecs <span class="title">getServerCodecs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> serverCodecs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PeerAwareInstanceRegistry <span class="title">getRegistry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> registry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApplicationInfoManager <span class="title">getApplicationInfoManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationInfoManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>com.netflix.eureka.EurekaServerContextHolder</code>：<strong>Eureka-Server上下文持有者</strong>，可以通过它获取上下文，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerContextHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Eureka-Server上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> EurekaServerContext serverContext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">EurekaServerContextHolder</span><span class="params">(EurekaServerContext serverContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.serverContext = serverContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Eureka-Server上下文</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Eureka-Server上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EurekaServerContext <span class="title">getServerContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.serverContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Eureka-Server上下文持有者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> EurekaServerContextHolder holder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> serverContext Eureka-Server上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(EurekaServerContext serverContext)</span> </span>&#123;</span><br><span class="line">        holder = <span class="keyword">new</span> EurekaServerContextHolder(serverContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Eureka-Server上下文持有者</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Eureka-Server上下文持有者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EurekaServerContextHolder <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> holder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="StatusFilter"><a href="#StatusFilter" class="headerlink" title="StatusFilter"></a>StatusFilter</h2><h3 id="StatusFilter简介"><a href="#StatusFilter简介" class="headerlink" title="StatusFilter简介"></a>StatusFilter简介</h3><p>所属包：<code>com.netflix.eureka.StatusFilter</code>，<strong>根据<code>InstanceStatus</code>过滤Eureka-Server</strong>。当 Eureka-Server 未处于开启( <code>InstanceStatus.UP</code> )状态，返回 HTTP 状态码 307 重定向 。</p><h3 id="StatusFilter源码"><a href="#StatusFilter源码" class="headerlink" title="StatusFilter源码"></a>StatusFilter源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                         FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    InstanceInfo myInfo = ApplicationInfoManager.getInstance().getInfo();</span><br><span class="line">    InstanceStatus status = myInfo.getStatus();</span><br><span class="line">    <span class="keyword">if</span> (status != InstanceStatus.UP &amp;&amp; response <span class="keyword">instanceof</span> HttpServletResponse) &#123;</span><br><span class="line">        HttpServletResponse httpRespone = (HttpServletResponse) response;</span><br><span class="line">        httpRespone.sendError(SC_TEMPORARY_REDIRECT,</span><br><span class="line">                              <span class="string">"Current node is currently not ready to serve requests -- current status: "</span></span><br><span class="line">                              + status + <span class="string">" - try another DS node: "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    chain.doFilter(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ServerRequestAuthFilter"><a href="#ServerRequestAuthFilter" class="headerlink" title="ServerRequestAuthFilter"></a>ServerRequestAuthFilter</h2><h3 id="ServerRequestAuthFilter简介"><a href="#ServerRequestAuthFilter简介" class="headerlink" title="ServerRequestAuthFilter简介"></a>ServerRequestAuthFilter简介</h3><p>所属包：<code>com.netflix.eureka.ServerRequestAuthFilter</code>，<strong>用于客户端请求的身份验证过滤器</strong>。目前，它只记录来自标题信息的支持的客户端标识数据。</p><h3 id="ServerRequestAuthFilter源码"><a href="#ServerRequestAuthFilter源码" class="headerlink" title="ServerRequestAuthFilter源码"></a>ServerRequestAuthFilter源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">logAuth</span><span class="params">(ServletRequest request)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (serverConfig.shouldLogIdentityHeaders()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (request <span class="keyword">instanceof</span> HttpServletRequest) &#123;</span><br><span class="line">            HttpServletRequest httpRequest = (HttpServletRequest) request;</span><br><span class="line"></span><br><span class="line">            String clientName = getHeader(httpRequest, AbstractEurekaIdentity.AUTH_NAME_HEADER_KEY);</span><br><span class="line">            String clientVersion = getHeader(httpRequest, AbstractEurekaIdentity.AUTH_VERSION_HEADER_KEY);</span><br><span class="line"></span><br><span class="line">            DynamicCounter.increment(MonitorConfig.builder(NAME_PREFIX + clientName + <span class="string">"-"</span> + clientVersion).build());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">getHeader</span><span class="params">(HttpServletRequest request, String headerKey)</span> </span>&#123;</span><br><span class="line">    String value = request.getHeader(headerKey);</span><br><span class="line">    <span class="keyword">return</span> Strings.isNullOrEmpty(value) ? UNKNOWN : value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RateLimitingFilter"><a href="#RateLimitingFilter" class="headerlink" title="RateLimitingFilter"></a>RateLimitingFilter</h2><h3 id="RateLimitingFilter简介"><a href="#RateLimitingFilter简介" class="headerlink" title="RateLimitingFilter简介"></a>RateLimitingFilter简介</h3><p>所属包：<code>com.netflix.eureka.RateLimitingFilter</code>，<strong>请求速率限制过滤器</strong>。</p><h2 id="GzipEncodingEnforcingFilter"><a href="#GzipEncodingEnforcingFilter" class="headerlink" title="GzipEncodingEnforcingFilter"></a>GzipEncodingEnforcingFilter</h2><h3 id="GzipEncodingEnforcingFilter简介"><a href="#GzipEncodingEnforcingFilter简介" class="headerlink" title="GzipEncodingEnforcingFilter简介"></a>GzipEncodingEnforcingFilter简介</h3><p>所属包：<code>com.netflix.eureka.GzipEncodingEnforcingFilter</code>，<strong>gzip编码</strong>。最初Eureka仅支持非压缩响应, 对于大型注册管理机构来说，它非常低效，因此增加了gzip编码。如今，所有现代HTTP客户端都透明地支持gzip HTTP响应，因此不再需要维护未压缩的内容。 通过添加此过滤器，Eureka 服务器将只接受明确支持gzip编码回复的GET请求。, 在即将到来的次要版本中，非压缩回复将完全丢弃，因此此过滤器将成为必需。</p><h3 id="GzipEncodingEnforcingFilter源码"><a href="#GzipEncodingEnforcingFilter源码" class="headerlink" title="GzipEncodingEnforcingFilter源码"></a>GzipEncodingEnforcingFilter源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    HttpServletRequest httpRequest = (HttpServletRequest) request;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"GET"</span>.equals(httpRequest.getMethod())) &#123;</span><br><span class="line">        String acceptEncoding = httpRequest.getHeader(HttpHeaders.ACCEPT_ENCODING);</span><br><span class="line">        <span class="keyword">if</span> (acceptEncoding == <span class="keyword">null</span>) &#123;</span><br><span class="line">            chain.doFilter(addGzipAcceptEncoding(httpRequest), response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!acceptEncoding.contains(<span class="string">"gzip"</span>)) &#123;</span><br><span class="line">            ((HttpServletResponse) response).setStatus(HttpServletResponse.SC_NOT_ACCEPTABLE);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    chain.doFilter(request, response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> HttpServletRequest <span class="title">addGzipAcceptEncoding</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HttpServletRequestWrapper(request) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title">getHeaders</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (HttpHeaders.ACCEPT_ENCODING.equals(name)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> EnumWrapper&lt;String&gt;(<span class="string">"gzip"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> EnumWrapper&lt;String&gt;(<span class="keyword">super</span>.getHeaders(name), HttpHeaders.ACCEPT_ENCODING);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title">getHeaderNames</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> EnumWrapper&lt;String&gt;(<span class="keyword">super</span>.getHeaderNames(), HttpHeaders.ACCEPT_ENCODING);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getHeader</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (HttpHeaders.ACCEPT_ENCODING.equals(name)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"gzip"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.getHeader(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumWrapper</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Enumeration</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Enumeration&lt;E&gt; delegate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicReference&lt;E&gt; extraElementRef;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">EnumWrapper</span><span class="params">(E extraElement)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">null</span>, extraElement);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">EnumWrapper</span><span class="params">(Enumeration&lt;E&gt; delegate, E extraElement)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.delegate = delegate;</span><br><span class="line">        <span class="keyword">this</span>.extraElementRef = <span class="keyword">new</span> AtomicReference&lt;&gt;(extraElement);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasMoreElements</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> extraElementRef.get() != <span class="keyword">null</span> || delegate != <span class="keyword">null</span> &amp;&amp; delegate.hasMoreElements();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">nextElement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        E extra = extraElementRef.getAndSet(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (extra != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> extra;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (delegate == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> delegate.nextElement();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ServletContainer"><a href="#ServletContainer" class="headerlink" title="ServletContainer"></a>ServletContainer</h2><h3 id="ServletContainer简介"><a href="#ServletContainer简介" class="headerlink" title="ServletContainer简介"></a>ServletContainer简介</h3><p>所属包：<code>com.sun.jersey.spi.container.servlet.ServletContainer</code>，<strong>Jersey MVC 请求过滤器</strong>。 </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们可以看到Eureka-Server的生成，是EurekaBootStrap实现了 <code>javax.servlet.ServletContextListener</code> 接口，在 Servlet 容器( 例如 Tomcat、Jetty )启动时，调用 <code>contextInitialized()</code> 方法初始化Eureka-Server。Eureka-Server内嵌 Eureka-Client，用于和Eureka-Server集群里其他节点通信交互。</p><p>欢迎关注博主其他的文章。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本篇文章主要解读Eureka-Server初始化的相关源码，文章较长，请谨慎点击！&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://yoga0521.github.io/categories/SpringCloud/"/>
    
      <category term="Eureka" scheme="https://yoga0521.github.io/categories/SpringCloud/Eureka/"/>
    
    
      <category term="Eureka" scheme="https://yoga0521.github.io/tags/Eureka/"/>
    
      <category term="SpringCloud" scheme="https://yoga0521.github.io/tags/SpringCloud/"/>
    
      <category term="微服务" scheme="https://yoga0521.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Eureka源码—EurekaClient</title>
    <link href="https://yoga0521.github.io/2018/03/21/Eureka%E6%BA%90%E7%A0%81%E2%80%94EurekaClient/"/>
    <id>https://yoga0521.github.io/2018/03/21/Eureka源码—EurekaClient/</id>
    <published>2018-03-21T12:19:14.000Z</published>
    <updated>2018-05-06T12:17:53.725Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇文章主要解读Eureka-Client初始化的相关源码，文章较长，请谨慎点击！</p><a id="more"></a><h2 id="EurekaInstanceConfig"><a href="#EurekaInstanceConfig" class="headerlink" title="EurekaInstanceConfig"></a>EurekaInstanceConfig</h2><p><img src="https://raw.githubusercontent.com/yoga0521/picture/master/Eureka/MyDataCenterInstanceConfig%E7%B1%BB%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="MyDataCenterInstanceConfig类结构图"></p><h3 id="EurekaInstanceConfig简介"><a href="#EurekaInstanceConfig简介" class="headerlink" title="EurekaInstanceConfig简介"></a>EurekaInstanceConfig简介</h3><p>所属包：<code>com.netflix.appinfo.EurekaInstanceConfig</code>，<strong>Eureka 应用实例配置接口</strong>（Application Provider，Application Consumer）。</p><h3 id="EurekaInstanceConfig源码"><a href="#EurekaInstanceConfig源码" class="headerlink" title="EurekaInstanceConfig源码"></a>EurekaInstanceConfig源码</h3><p>博主已添加中文注释，<a href="https://github.com/yoga0521/eureka/blob/master/eureka-client/src/main/java/com/netflix/appinfo/EurekaInstanceConfig.java" target="_blank" rel="noopener">点击查看</a>。</p><h3 id="EurekaInstanceConfig重要属性或者重要方法"><a href="#EurekaInstanceConfig重要属性或者重要方法" class="headerlink" title="EurekaInstanceConfig重要属性或者重要方法"></a>EurekaInstanceConfig重要属性或者重要方法</h3><ul><li><code>getInstanceId()</code>获取实例id，组成结构为<code>${spring.application.name}:${spring.application.instance_id:${random.value}}</code>默认为null。</li><li><code>geAppName()</code>获取应用名，默认为”unknown”。</li></ul><ul><li><p><code>getLeaseRenewalIntervalInSeconds()</code>获取租约续约频率，单位为秒。默认为30s。应用发送心跳给Eureka-Server进行续约（告诉Eureka-Server自己还活着）。</p></li><li><p><code>getLeaseExpirationDurationInSeconds()</code> 获取租约过期时间，单位为秒。默认为90s。如果超过该时间，应用还没有向Eureka-Server发送心跳，那该租约就过期了，Eureka-Serever会进行应用移除。</p></li><li><p><code>getMetadataMap()</code>获取实例的元数据。如果你想自定义一些数据，在各服务之间使用，就需要该方法。</p></li><li><p><code>getHealthCheckUrlPath()</code>,<code>getHealthCheckUrl()</code>,<code>getSecureHealthCheckUrl()</code>健康检查相关的几个方法。</p></li><li><p><code>getNamespace()</code>获取命名空间，已配置对应的eureka属性，默认为<code>eureka</code>。</p><p>​</p></li></ul><h2 id="AbstractInstanceConfig"><a href="#AbstractInstanceConfig" class="headerlink" title="AbstractInstanceConfig"></a>AbstractInstanceConfig</h2><h3 id="AbstractInstanceConfig简介"><a href="#AbstractInstanceConfig简介" class="headerlink" title="AbstractInstanceConfig简介"></a>AbstractInstanceConfig简介</h3><p>所属包：<code>com.netflix.appinfo.AbstractInstanceConfig</code>，<strong>Eureka 应用实例配置抽象基类，主要实现一些相对通用的配置</strong></p><h3 id="AbstractInstanceConfig源码"><a href="#AbstractInstanceConfig源码" class="headerlink" title="AbstractInstanceConfig源码"></a>AbstractInstanceConfig源码</h3><p>博主已添加中文注释，<a href="https://github.com/yoga0521/eureka/blob/master/eureka-client/src/main/java/com/netflix/appinfo/AbstractInstanceConfig.java" target="_blank" rel="noopener">点击查看</a>。</p><h3 id="AbstractInstanceConfig重要属性或者重要方法"><a href="#AbstractInstanceConfig重要属性或者重要方法" class="headerlink" title="AbstractInstanceConfig重要属性或者重要方法"></a>AbstractInstanceConfig重要属性或者重要方法</h3><ul><li>主要设置一些基础的属性，以及对应的get/set方法</li><li><code>getHostInfo()</code>获取本地服务器的主机名和主机IP地址</li></ul><h2 id="PropertiesInstanceConfig"><a href="#PropertiesInstanceConfig" class="headerlink" title="PropertiesInstanceConfig"></a>PropertiesInstanceConfig</h2><h3 id="PropertiesInstanceConfig简介"><a href="#PropertiesInstanceConfig简介" class="headerlink" title="PropertiesInstanceConfig简介"></a>PropertiesInstanceConfig简介</h3><p>所属包：<code>com.netflix.appinfo.PropertiesInstanceConfig</code>，<strong>通过配置文件进行Eureka实例配置的抽象基类</strong></p><h3 id="PropertiesInstanceConfig源码"><a href="#PropertiesInstanceConfig源码" class="headerlink" title="PropertiesInstanceConfig源码"></a>PropertiesInstanceConfig源码</h3><p>博主已添加中文注释，<a href="https://github.com/yoga0521/eureka/blob/master/eureka-client/src/main/java/com/netflix/appinfo/PropertiesInstanceConfig.java" target="_blank" rel="noopener">点击查看</a>。</p><h3 id="PropertiesInstanceConfig重要属性或者重要方法"><a href="#PropertiesInstanceConfig重要属性或者重要方法" class="headerlink" title="PropertiesInstanceConfig重要属性或者重要方法"></a>PropertiesInstanceConfig重要属性或者重要方法</h3><ul><li><p><code>namespace</code>命名空间。</p></li><li><p><code>configInstance</code>配置文件，基于<a href="https://github.com/Netflix/archaius" target="_blank" rel="noopener">Netflix Archaius 1.x</a> 实现读取配置文件。基于<a href="https://github.com/Netflix/archaius/tree/2.x" target="_blank" rel="noopener">Netflix Archaius 2.x</a> 的还在开发中。</p></li><li><p><code>appGrpNameFromEnv</code>从环境变量中获取应用分组，<code>ConfigurationManager.getConfigInstance</code>获取当前的系统范围配置。</p></li><li><p><code>Archaius1Utils.initConfig(CommonConstants.CONFIG_FILE_NAME)</code>，<code>CommonConstants.CONFIG_FILE_NAME</code>为<code>eureka-client</code>，<code>Archaius1Utils.initConfig</code>方法源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Archaius1Utils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(Archaius1Utils.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ARCHAIUS_DEPLOYMENT_ENVIRONMENT = <span class="string">"archaius.deployment.environment"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EUREKA_ENVIRONMENT = <span class="string">"eureka.environment"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DynamicPropertyFactory <span class="title">initConfig</span><span class="params">(String configName)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置文件对象</span></span><br><span class="line">        DynamicPropertyFactory configInstance = DynamicPropertyFactory.getInstance();</span><br><span class="line">        <span class="comment">// 配置文件名，如果configName没有配置，即为CommonConstants.CONFIG_FILE_NAME（"eureka-client"）</span></span><br><span class="line">        DynamicStringProperty EUREKA_PROPS_FILE = configInstance.getStringProperty(<span class="string">"eureka.client.props"</span>, configName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置文件环境</span></span><br><span class="line">        String env = ConfigurationManager.getConfigInstance().getString(EUREKA_ENVIRONMENT, <span class="string">"test"</span>);</span><br><span class="line">        <span class="comment">// 将配置文件加载到环境变量</span></span><br><span class="line">        ConfigurationManager.getConfigInstance().setProperty(ARCHAIUS_DEPLOYMENT_ENVIRONMENT, env);</span><br><span class="line"></span><br><span class="line">        String eurekaPropsFile = EUREKA_PROPS_FILE.get();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//读取配置文件到环境变量，首先读取 $&#123;eureka.client.props&#125; 对应的配置文件；然后读取 $&#123;eureka.client.props&#125;-$&#123;eureka.environment&#125; 对应的配置文件。若有相同属性，进行覆盖。</span></span><br><span class="line">            ConfigurationManager.loadCascadedPropertiesFromResources(eurekaPropsFile);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            logger.warn(</span><br><span class="line">                <span class="string">"Cannot find the properties specified : &#123;&#125;. This may be okay if there are other environment "</span></span><br><span class="line">                + <span class="string">"specific properties or the configuration is installed with a different mechanism."</span>,</span><br><span class="line">                eurekaPropsFile);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> configInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>其他实现方法基本类似，都是从配置文件中获取值，举一个例子：</p><p>​    <code>isInstanceEnabledOnit()</code>：从配置文件中获取是否在实例初始化的时候开启，并传一个默认值（这里是父类AbstractInstanceConfig中实现的方法），namespace的属性key都在PropertyBasedInstanceConfigConstants中</p></li></ul><h2 id="MyDataCenterInstanceConfig"><a href="#MyDataCenterInstanceConfig" class="headerlink" title="MyDataCenterInstanceConfig"></a>MyDataCenterInstanceConfig</h2><h3 id="MyDataCenterInstanceConfig简介"><a href="#MyDataCenterInstanceConfig简介" class="headerlink" title="MyDataCenterInstanceConfig简介"></a>MyDataCenterInstanceConfig简介</h3><p>所属包：<code>com.netflix.appinfo.MyDataCenterInstanceConfig</code>，<strong>Eureka应用实例配置实现类</strong></p><h3 id="MyDataCenterInstanceConfig源码"><a href="#MyDataCenterInstanceConfig源码" class="headerlink" title="MyDataCenterInstanceConfig源码"></a>MyDataCenterInstanceConfig源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDataCenterInstanceConfig</span> <span class="keyword">extends</span> <span class="title">PropertiesInstanceConfig</span> <span class="keyword">implements</span> <span class="title">EurekaInstanceConfig</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 无参构造方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyDataCenterInstanceConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyDataCenterInstanceConfig</span><span class="params">(String namespace)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用父类含有namespace参数的构造函数进行初始化</span></span><br><span class="line">        <span class="keyword">super</span>(namespace);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyDataCenterInstanceConfig</span><span class="params">(String namespace, DataCenterInfo dataCenterInfo)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用父类含有namespace和dataCenterInfo参数的构造函数进行初始化</span></span><br><span class="line">        <span class="keyword">super</span>(namespace, dataCenterInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="InstanceInfo"><a href="#InstanceInfo" class="headerlink" title="InstanceInfo"></a>InstanceInfo</h2><h3 id="InstanceInfo简介"><a href="#InstanceInfo简介" class="headerlink" title="InstanceInfo简介"></a>InstanceInfo简介</h3><p>所属包：<code>com.netflix.appinfo.InstanceInfo</code>，<strong>应用实例信息</strong>。Eureka-Client 向 Eureka-Server 注册该对象信息。注册成功后，可以被其他 Eureka-Client 发现。Eureka通过<code>com.netflix.appinfo.providers.EurekaConfigBasedInstanceInfoProvider</code>基于<code>EurekaInstanceConfig</code>创建<code>InstanceInfo</code>。</p><h3 id="EurekaConfigBasedInstanceInfoProvider源码"><a href="#EurekaConfigBasedInstanceInfoProvider源码" class="headerlink" title="EurekaConfigBasedInstanceInfoProvider源码"></a>EurekaConfigBasedInstanceInfoProvider源码</h3><p>博主已添加中文注释，<a href="https://github.com/yoga0521/eureka/blob/master/eureka-client/src/main/java/com/netflix/appinfo/providers/EurekaConfigBasedInstanceInfoProvider.java" target="_blank" rel="noopener">点击查看</a>。</p><h3 id="EurekaConfigBasedInstanceInfoProvider重要属性或者重要方法"><a href="#EurekaConfigBasedInstanceInfoProvider重要属性或者重要方法" class="headerlink" title="EurekaConfigBasedInstanceInfoProvider重要属性或者重要方法"></a>EurekaConfigBasedInstanceInfoProvider重要属性或者重要方法</h3><ul><li><p>基本上每个属性和每个方法都添加了注释</p></li><li><p>其中vip地址解析器源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">VipAddressResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Convert &lt;code&gt;VIPAddress&lt;/code&gt; by substituting environment variables if necessary.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> vipAddressMacro the macro for which the interpolation needs to be made.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a string representing the final &lt;code&gt;VIPAddress&lt;/code&gt; after substitution.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">resolveDeploymentContextBasedVipAddresses</span><span class="params">(String vipAddressMacro)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类源码（Archaius1实现，Archaius2还在开发中）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Archaius1VipAddressResolver</span> <span class="keyword">implements</span> <span class="title">VipAddressResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(Archaius1VipAddressResolver.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern VIP_ATTRIBUTES_PATTERN = Pattern.compile(<span class="string">"\\$\\&#123;(.*?)\\&#125;"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">resolveDeploymentContextBasedVipAddresses</span><span class="params">(String vipAddressMacro)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (vipAddressMacro == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String result = vipAddressMacro;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//匹配$&#123;(.*?)&#125;</span></span><br><span class="line">        Matcher matcher = VIP_ATTRIBUTES_PATTERN.matcher(result);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            String key = matcher.group(<span class="number">1</span>);</span><br><span class="line">            String value = DynamicPropertyFactory.getInstance().getStringProperty(key, <span class="string">""</span>).get();</span><br><span class="line"></span><br><span class="line">            logger.debug(<span class="string">"att:&#123;&#125;"</span>, matcher.group());</span><br><span class="line">            logger.debug(<span class="string">", att key:&#123;&#125;"</span>, key);</span><br><span class="line">            logger.debug(<span class="string">", att value:&#123;&#125;"</span>, value);</span><br><span class="line">            logger.debug(<span class="string">""</span>);</span><br><span class="line">            <span class="comment">//将$&#123;(.*?)&#125;替换为配置文件中对应的value</span></span><br><span class="line">            result = result.replaceAll(<span class="string">"\\$\\&#123;"</span> + key + <span class="string">"\\&#125;"</span>, value);</span><br><span class="line">            matcher = VIP_ATTRIBUTES_PATTERN.matcher(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="ApplicationInfoManager"><a href="#ApplicationInfoManager" class="headerlink" title="ApplicationInfoManager"></a>ApplicationInfoManager</h2><h3 id="ApplicationInfoManager简介"><a href="#ApplicationInfoManager简介" class="headerlink" title="ApplicationInfoManager简介"></a>ApplicationInfoManager简介</h3><p>所属包：<code>com.netflix.appinfo.ApplicationInfoManager</code>，<strong>应用信息管理类</strong>，由<code>InstanceInfo</code>和<code>EurekaInstanceConfig</code>生成。</p><h3 id="ApplicationInfoManager源码"><a href="#ApplicationInfoManager源码" class="headerlink" title="ApplicationInfoManager源码"></a>ApplicationInfoManager源码</h3><p>博主已添加中文注释，<a href="https://github.com/yoga0521/eureka/blob/master/eureka-client/src/main/java/com/netflix/appinfo/ApplicationInfoManager.java" target="_blank" rel="noopener">点击查看</a>。</p><h2 id="EurekaClientConfig"><a href="#EurekaClientConfig" class="headerlink" title="EurekaClientConfig"></a>EurekaClientConfig</h2><h3 id="EurekaClientConfig简介"><a href="#EurekaClientConfig简介" class="headerlink" title="EurekaClientConfig简介"></a>EurekaClientConfig简介</h3><p>所属包：<code>com.netflix.discovery.EurekaClientConfig</code>，<strong>Eureka-Client 配置接口</strong>，获取连接的 Eureka-Server 的地址、获取服务提供者列表的频率、注册自身为服务提供者的频率等等。</p><h3 id="EurekaClientConfig源码"><a href="#EurekaClientConfig源码" class="headerlink" title="EurekaClientConfig源码"></a>EurekaClientConfig源码</h3><p>博主已添加中文注释，<a href="https://github.com/yoga0521/eureka/blob/master/eureka-client/src/main/java/com/netflix/discovery/EurekaClientConfig.java" target="_blank" rel="noopener">点击查看</a>。</p><h3 id="EurekaClientConfig重要属性或者重要方法"><a href="#EurekaClientConfig重要属性或者重要方法" class="headerlink" title="EurekaClientConfig重要属性或者重要方法"></a>EurekaClientConfig重要属性或者重要方法</h3><ul><li><code>getRegion()</code>，<code>getAvailabilityZones()</code>：region和zone（或者Availability Zone）均是AWS的概念。在非AWS环境下，我们可以简单地将region理解为Eureka集群，zone理解成机房。Spring Cloud中默认的region是us-east-1 。具体可查看<a href="http://www.itmuch.com/spring-cloud-1/?from=www.iocoder.cn" target="_blank" rel="noopener">《周立 —— Region、Zone解析》</a>。</li><li><code>getEurekaServerServiceUrls()</code>：获取Eureka-Server的Url集合</li><li>从Eureka-Server获取注册信息的相关方法：<ul><li><code>getRegistryFetchIntervalSeconds()</code>：获取注册信息的时间间隔，单位为秒。默认为30s</li><li><code>getEurekaServiceUrlPollIntervalSeconds()</code>：向Eureka-Server获取Eureka服务地址的变化时间间隔，单位为秒。默认为 5 <em> 60 </em> 1000 s</li><li><code>getEurekaServerReadTimeoutSeconds()</code>：获取Eureka-Server读取超时时间，单位为秒。默认为8s</li><li><code>getBackupRegistryImpl()</code>：获取备份注册中心实现类。默认为null</li><li><code>shouldPreferSameZoneEureka()</code>：相同Zone的Eureka是否优先。默认为true</li><li><code>shouldDisableDelta()</code>：是否使用增量形式获取注册信息。默认为false</li><li><code>fetchRegistryForRemoteRegions()</code>：获取远程区域的注册信息。默认为null</li><li><code>shouldFilterOnlyUpInstances()</code>：是否只获取Up（启动）状态的实例。默认为true</li><li><code>shouldFetchRegistry()</code>：是否从Eureka-Server获取注册信息。默认为true</li><li><code>getRegistryRefreshSingleVipAddress()</code>：获取单个vip地址（虚拟IP地址）的注册信息。默认为null</li><li><code>getCacheRefreshExecutorThreadPoolSize()</code>：获取注册信息缓存刷新的线程池大小。默认为5</li><li><code>getCacheRefreshExecutorExponentialBackOffBound()</code>：获取注册信息缓存刷新执行超时后的延迟重试时间的最大倍数。默认为10</li></ul></li><li>向Eureka-Server注册自身服务的相关方法：<ul><li><code>getInstanceInfoReplicationIntervalSeconds()</code>：获取向Eureka-Server同步实例信息的时间间隔，单位为秒。默认为30s</li><li><code>getInitialInstanceInfoReplicationIntervalSeconds()</code>：获取最初向Eureka-Server同步实例信息的时间间隔，单位为秒。默认为40s</li><li><code>getEurekaServerConnectTimeoutSeconds()</code>：获取Eureka-Server连接超时时间，单位为秒。默认为5s</li><li><code>shouldRegisterWithEureka()</code>：是否向Eureka-Server注册自身服务。默认为true</li><li><code>shouldUnregisterOnShutdown()</code>：当Eureka-Server关闭的时候，是否注销自己的服务。默认为true</li><li><code>getHeartbeatExecutorThreadPoolSize()</code>：获取心跳检测执行的线程池大小。默认为5</li><li><code>getHeartbeatExecutorExponentialBackOffBound()</code>：获取心跳检测执行超时后的延迟重试时间的最大倍数。默认为10</li><li><code>shouldEnforceRegistrationAtInit()</code>：是否在实例初始化的时候进行注册。默认为false</li></ul></li></ul><h2 id="DefaultEurekaClientConfig"><a href="#DefaultEurekaClientConfig" class="headerlink" title="DefaultEurekaClientConfig"></a>DefaultEurekaClientConfig</h2><h3 id="DefaultEurekaClientConfig简介"><a href="#DefaultEurekaClientConfig简介" class="headerlink" title="DefaultEurekaClientConfig简介"></a>DefaultEurekaClientConfig简介</h3><p>所属包：<code>com.netflix.discovery.DefaultEurekaClientConfig</code>，<strong>基于配置文件的Eureka-Client配置实现类</strong>。</p><h3 id="DefaultEurekaClientConfig源码"><a href="#DefaultEurekaClientConfig源码" class="headerlink" title="DefaultEurekaClientConfig源码"></a>DefaultEurekaClientConfig源码</h3><p>博主已添加中文注释，<a href="https://github.com/yoga0521/eureka/blob/master/eureka-client/src/main/java/com/netflix/discovery/DefaultEurekaClientConfig.java" target="_blank" rel="noopener">点击查看</a>。</p><h3 id="DefaultEurekaClientConfig重要属性或者重要方法"><a href="#DefaultEurekaClientConfig重要属性或者重要方法" class="headerlink" title="DefaultEurekaClientConfig重要属性或者重要方法"></a>DefaultEurekaClientConfig重要属性或者重要方法</h3><ul><li>其中属性和构造方法基本上都加了中文注释。</li><li><p>其他实现方法基本类似，都是从配置文件中获取值，举一个例子：</p><pre><code>`getRegistryFetchIntervalSeconds()`：从配置文件中获取读取注册信息的时间间隔，并传一个默认值（这里是30），namespace后面的属性key都在PropertyBasedClientConfigConstants中。</code></pre></li></ul><h2 id="DefaultEurekaClientConfigProvider"><a href="#DefaultEurekaClientConfigProvider" class="headerlink" title="DefaultEurekaClientConfigProvider"></a>DefaultEurekaClientConfigProvider</h2><h3 id="DefaultEurekaClientConfigProvider简介"><a href="#DefaultEurekaClientConfigProvider简介" class="headerlink" title="DefaultEurekaClientConfigProvider简介"></a>DefaultEurekaClientConfigProvider简介</h3><p>所属包：<code>com.netflix.discovery.providers.DefaultEurekaClientConfigProvider</code>，<strong>创建 DefaultEurekaClientConfig 的工厂 </strong>。</p><h3 id="DefaultEurekaClientConfigProvider源码"><a href="#DefaultEurekaClientConfigProvider源码" class="headerlink" title="DefaultEurekaClientConfigProvider源码"></a>DefaultEurekaClientConfigProvider源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultEurekaClientConfigProvider</span> <span class="keyword">implements</span> <span class="title">Provider</span>&lt;<span class="title">EurekaClientConfig</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span>(optional = <span class="keyword">true</span>)</span><br><span class="line">    <span class="meta">@EurekaNamespace</span></span><br><span class="line">    <span class="keyword">private</span> String namespace;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DefaultEurekaClientConfig config;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> EurekaClientConfig <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (config == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//根据命名空间是否为空来判断调用哪一个构造方法创建DefaultEurekaClientConfigProvider</span></span><br><span class="line">            config = (namespace == <span class="keyword">null</span>)</span><br><span class="line">                    ? <span class="keyword">new</span> DefaultEurekaClientConfig()</span><br><span class="line">                    : <span class="keyword">new</span> DefaultEurekaClientConfig(namespace);</span><br><span class="line">                    </span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> Remove this when DiscoveryManager is finally no longer used</span></span><br><span class="line">            DiscoveryManager.getInstance().setEurekaClientConfig(config);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很简单的一个类，不做过多的分析。</p><h2 id="EurekaTransportConfig"><a href="#EurekaTransportConfig" class="headerlink" title="EurekaTransportConfig"></a>EurekaTransportConfig</h2><h3 id="EurekaTransportConfig简介"><a href="#EurekaTransportConfig简介" class="headerlink" title="EurekaTransportConfig简介"></a>EurekaTransportConfig简介</h3><p>所属包：<code>com.netflix.discovery.shared.transport.EurekaTransportConfig</code>，<strong>Eureka网络传输配置接口</strong>。</p><h3 id="EurekaTransportConfig源码"><a href="#EurekaTransportConfig源码" class="headerlink" title="EurekaTransportConfig源码"></a>EurekaTransportConfig源码</h3><p>博主已添加中文注释，<a href="https://github.com/yoga0521/eureka/blob/master/eureka-client/src/main/java/com/netflix/discovery/shared/transport/EurekaTransportConfig.java" target="_blank" rel="noopener">点击查看</a>。</p><h3 id="EurekaTransportConfig重要属性或者重要方法"><a href="#EurekaTransportConfig重要属性或者重要方法" class="headerlink" title="EurekaTransportConfig重要属性或者重要方法"></a>EurekaTransportConfig重要属性或者重要方法</h3><ul><li><code>getSessionedClientReconnectIntervalSeconds()</code>：Eureka-Client 会话重新连接的时间间隔，单位为秒，默认为20*60s。</li><li><code>getRetryableClientQuarantineRefreshPercentage()</code>：请求失败的Eureka-Client隔离集合占Eureka-Client总数的占比，超过该比例会进行清空，默认为0.66。</li><li>Endpoint相关：<ul><li><code>getAsyncResolverRefreshIntervalMs()</code>：异步解析 EndPoint 集群频率，单位为毫秒。默认为5 <em> 60 </em> 1000ms。</li><li><code>getAsyncResolverWarmUpTimeoutMs()</code>：异步解析器预热解析 EndPoint 集群超时时间，单位为毫秒。默认为5000s。</li><li><code>getAsyncExecutorThreadPoolSize()</code>：异步线程池大小，默认为5。</li></ul></li></ul><h2 id="DefaultEurekaTransportConfig"><a href="#DefaultEurekaTransportConfig" class="headerlink" title="DefaultEurekaTransportConfig"></a>DefaultEurekaTransportConfig</h2><h3 id="DefaultEurekaTransportConfig简介"><a href="#DefaultEurekaTransportConfig简介" class="headerlink" title="DefaultEurekaTransportConfig简介"></a>DefaultEurekaTransportConfig简介</h3><p>所属包：<code>com.netflix.discovery.shared.transport.DefaultEurekaTransportConfig</code>，<strong>基于配置文件的网络传输配置实现类</strong> 。</p><h3 id="DefaultEurekaTransportConfig源码"><a href="#DefaultEurekaTransportConfig源码" class="headerlink" title="DefaultEurekaTransportConfig源码"></a>DefaultEurekaTransportConfig源码</h3><p>博主已添加中文注释，<a href="https://github.com/yoga0521/eureka/blob/master/eureka-client/src/main/java/com/netflix/discovery/shared/transport/DefaultEurekaTransportConfig.java" target="_blank" rel="noopener">点击查看</a>。</p><h3 id="DefaultEurekaTransportConfig重要属性或者重要方法"><a href="#DefaultEurekaTransportConfig重要属性或者重要方法" class="headerlink" title="DefaultEurekaTransportConfig重要属性或者重要方法"></a>DefaultEurekaTransportConfig重要属性或者重要方法</h3><ul><li>其他实现方法基本类似，都是从配置文件中获取值，举一个例子：<ul><li><code>getSessionedClientReconnectIntervalSeconds()</code>：Eureka-Client 会话重新连接的时间间隔，并传一个默认值（这里是20*60），namespace的属性key都在PropertyBasedTransportConfigConstants中。</li></ul></li></ul><h2 id="LookupService"><a href="#LookupService" class="headerlink" title="LookupService"></a>LookupService</h2><h3 id="LookupService简介"><a href="#LookupService简介" class="headerlink" title="LookupService简介"></a>LookupService简介</h3><p>所属包：<code>com.netflix.discovery.shared.LookupService</code>，<strong>查找服务接口</strong>，可以获取应用集合和应用实例集合。</p><ul><li>在 Eureka-Client 里，EurekaClient 继承该接口。</li><li>在 Eureka-Server 里，<code>com.netflix.eureka.registry.InstanceRegistry</code> 继承该接口。</li></ul><h3 id="LookupService源码"><a href="#LookupService源码" class="headerlink" title="LookupService源码"></a>LookupService源码</h3><p> 博主已添加中文注释，<a href="https://github.com/yoga0521/eureka/blob/master/eureka-client/src/main/java/com/netflix/discovery/shared/LookupService.java" target="_blank" rel="noopener">点击查看</a>。</p><h2 id="EurekaClient"><a href="#EurekaClient" class="headerlink" title="EurekaClient"></a>EurekaClient</h2><h3 id="EurekaClient简介"><a href="#EurekaClient简介" class="headerlink" title="EurekaClient简介"></a>EurekaClient简介</h3><p>所属包：<code>com.netflix.discovery.EurekaClient</code>，<strong>Eureka-Client接口</strong> 。</p><h3 id="EurekaClient源码"><a href="#EurekaClient源码" class="headerlink" title="EurekaClient源码"></a>EurekaClient源码</h3><p>博主已添加中文注释，<a href="https://github.com/yoga0521/eureka/blob/master/eureka-client/src/main/java/com/netflix/discovery/EurekaClient.java" target="_blank" rel="noopener">点击查看</a>。</p><h3 id="EurkeaClient重要属性或者重要方法"><a href="#EurkeaClient重要属性或者重要方法" class="headerlink" title="EurkeaClient重要属性或者重要方法"></a>EurkeaClient重要属性或者重要方法</h3><ul><li>获取应用集合：<ul><li><code>getApplicationsForARegion(@Nullable String region)</code>：获取指定区域中的Applications。</li><li><code>getApplications(String serviceUrl)</code>：获取指定的Eureka服务地址中注册的应用集合。</li></ul></li><li>获取应用实例集合：<ul><li><code>getInstancesByVipAddress(String vipAddress, boolean secure)</code>：获取指定VIP地址的实例列表。</li><li><code>getInstancesByVipAddress(String vipAddress, boolean secure, @Nullable String region)</code>：获取指定VIP地址和区域的实例信息列表。</li><li><code>getInstancesByVipAddressAndAppName(String vipAddress, String appName, boolean secure)</code>：获取指定VIP地址和appName的实例信息列表。</li></ul></li><li><code>getAllKnownRegions()</code>：获取所有已知的区域。</li><li><code>getInstanceRemoteStatus()</code>：获取实例状态。</li><li><code>registerHealthCheck()</code>：Eureka-Client注册健康检查。</li><li><code>getHealthCheckHandler()</code>：获取健康监测处理器。</li><li><code>registerEventListener()</code>：Eureka-Client注册事件监听。</li><li><code>unregisterEventListener()</code>：Eureka-Client取消事件监听注册。</li><li><code>getEurekaClientConfig()</code>：获取Eureka-Client配置。</li><li><code>getApplicationInfoManager()</code>：获取应用信息管理器。</li></ul><h2 id="DiscoveryClient"><a href="#DiscoveryClient" class="headerlink" title="DiscoveryClient"></a>DiscoveryClient</h2><p><img src="https://raw.githubusercontent.com/yoga0521/picture/master/Eureka/DiscoveryClient.png" alt="DiscoveryClient类结构图"></p><h3 id="DiscoveryClient简介"><a href="#DiscoveryClient简介" class="headerlink" title="DiscoveryClient简介"></a>DiscoveryClient简介</h3><p>所属包：<code>com.netflix.discovery.DiscoveryClient</code>，<strong>EurekaClient接口的实现类，用于与 Eureka-Server 交互</strong>。包含方法：</p><ul><li>向 Eureka-Server <strong>注册</strong>自身服务</li><li>向 Eureka-Server <strong>续约</strong>自身服务</li><li>向 Eureka-Server <strong>取消</strong>自身服务，当关闭时</li><li>从 Eureka-Server <strong>查询</strong>应用集合和应用实例信息</li><li><strong>本文主要介绍DiscoveryClient的初始化，其他方法后续文章会有介绍</strong></li></ul><h3 id="DiscoveryClient源码"><a href="#DiscoveryClient源码" class="headerlink" title="DiscoveryClient源码"></a>DiscoveryClient源码</h3><p>博主已添加中文注释，<a href="https://github.com/yoga0521/eureka/blob/master/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java" target="_blank" rel="noopener">点击查看</a>。</p><h3 id="DiscoveryClient重要属性或者重要方法"><a href="#DiscoveryClient重要属性或者重要方法" class="headerlink" title="DiscoveryClient重要属性或者重要方法"></a>DiscoveryClient重要属性或者重要方法</h3><p>构造函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Inject</span></span><br><span class="line">DiscoveryClient(ApplicationInfoManager applicationInfoManager, EurekaClientConfig config, AbstractDiscoveryClientOptionalArgs args,</span><br><span class="line">                    Provider&lt;BackupRegistry&gt; backupRegistryProvider) &#123;</span><br><span class="line">    <span class="comment">//省略具体代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>参数：</p><ul><li><p><code>ApplicationInfoManager</code>：<strong>应用信息管理类</strong>，具体可查看<code>ApplicationInfoManager</code>小结。</p></li><li><p><code>EurekaClientConfig</code>：<strong>Eureka-Client 配置接口</strong>，获取连接的 Eureka-Server 的地址、获取服务提供者列表的频率、注册自身为服务提供者的频率等等，具体可查看<code>EurekaClientConfig</code>小结。</p></li><li><p><code>AbstractDiscoveryClientOptionalArgs</code>：<strong>DiscoveryClient 可选参数抽象基类</strong>。该参数是选填参数，实际生产中很少使用，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractDiscoveryClientOptionalArgs</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 健康检查回调的工厂</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Provider&lt;HealthCheckCallback&gt; healthCheckCallbackProvider;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 健康检查处理器的工厂</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Provider&lt;HealthCheckHandler&gt; healthCheckHandlerProvider;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Eureka-Server注册之前的处理器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PreRegistrationHandler preRegistrationHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Jersey 过滤器集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Collection&lt;T&gt; additionalFilters;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Jersey 客户端</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    EurekaJerseyClient eurekaJerseyClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成 Jersey 客户端工厂</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TransportClientFactory transportClientFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成 Jersey 客户端工厂</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TransportClientFactories transportClientFactories;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Eureka 事件监听集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;EurekaEventListener&gt; eventListeners;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ssl</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Optional&lt;SSLContext&gt; sslContext = Optional.empty();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主机认证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Optional&lt;HostnameVerifier&gt; hostnameVerifier = Optional.empty();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Provider&lt;BackupRegistry&gt;</code>：<strong>备份注册中心接口</strong>，当 Eureka-Client 启动时，无法从 Eureka-Server 读取注册信息，就从备份注册中心读取注册信息 ，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImplementedBy</span>(NotImplementedRegistryImpl.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BackupRegistry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Applications <span class="title">fetchRegistry</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Applications <span class="title">fetchRegistry</span><span class="params">(String[] includeRemoteRegions)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类源码如下（可以看出暂未提供合适的实现）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotImplementedRegistryImpl</span> <span class="keyword">implements</span> <span class="title">BackupRegistry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取应用注册信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 应用列表对象 （默认为null）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Applications <span class="title">fetchRegistry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取应用注册信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> includeRemoteRegions 远程区域列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 应用列表对象（默认为null）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Applications <span class="title">fetchRegistry</span><span class="params">(String[] includeRemoteRegions)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>具体逻辑可查看源码，博主已添加中文注释</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们可以看到 EurekaClient 的创建，先是通过 EurekaInstanceConfig 生成 InstanceInfo，再通过 EurekaInstanceConfig 和 InstanceInfo 生成 ApplicationInfoManager，最后 EurekaClientConfig 和 ApplicationInfoManager 生成 EurekaClient。</p><p>欢迎关注博主其他的文章。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本篇文章主要解读Eureka-Client初始化的相关源码，文章较长，请谨慎点击！&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://yoga0521.github.io/categories/SpringCloud/"/>
    
      <category term="Eureka" scheme="https://yoga0521.github.io/categories/SpringCloud/Eureka/"/>
    
    
      <category term="Eureka" scheme="https://yoga0521.github.io/tags/Eureka/"/>
    
      <category term="SpringCloud" scheme="https://yoga0521.github.io/tags/SpringCloud/"/>
    
      <category term="微服务" scheme="https://yoga0521.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Eureka源码系列简介</title>
    <link href="https://yoga0521.github.io/2018/03/18/Eureka%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97%E7%AE%80%E4%BB%8B/"/>
    <id>https://yoga0521.github.io/2018/03/18/Eureka源码系列简介/</id>
    <published>2018-03-18T12:46:22.000Z</published>
    <updated>2018-05-06T11:54:40.413Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近关于微服务的话题很火热，本系列文章主要是从源码去解读Eureka。</p><a id="more"></a><p>PS：</p><ol><li>什么是微服务，本文不做具体介绍，可以自行上网查找。</li><li>如果没有使用过SpringCloud，博主建议先自行搭建一套服务之后，再进行源码的解读。</li><li>该系列文章很枯燥也很耗时，请合理安排时间。</li><li>博主是参考了芋艿大佬的路线进行源码解读的，其中有部分问题借鉴了芋艿大佬的解读。<a href="http://www.iocoder.cn/" target="_blank" rel="noopener">点击访问芋艿大佬的博客</a></li></ol><h2 id="Eureka项目结构简介"><a href="#Eureka项目结构简介" class="headerlink" title="Eureka项目结构简介"></a>Eureka项目结构简介</h2><p><img src="https://raw.githubusercontent.com/yoga0521/picture/master/Eureka/Eureka%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95.png" alt="Eureka项目结构图"></p><h3 id="eureka-client"><a href="#eureka-client" class="headerlink" title="eureka-client"></a>eureka-client</h3><ol><li><code>com.netflix.appinfo</code> : Eureka-Client 的应用配置</li><li><code>com.netflix.discovery</code> : Eureka-Client 的注册和发现功能</li></ol><h3 id="eureka-client-archaius2"><a href="#eureka-client-archaius2" class="headerlink" title="eureka-client-archaius2"></a>eureka-client-archaius2</h3><p>Archaius是 Netflix 开源的配置管理组件。Eureka 使用 1.x 版本，2.x 版本仍然在开发中，2.x只兼容jdk1.8以上的版本。</p><h3 id="eureka-client-jersey2"><a href="#eureka-client-jersey2" class="headerlink" title="eureka-client-jersey2"></a>eureka-client-jersey2</h3><p>Jersey 框架实现Eureka的 RESTful HTTP接口。Eureka 使用 1.x 版本，2.x 版本由社区实现。</p><h3 id="eureka-core"><a href="#eureka-core" class="headerlink" title="eureka-core"></a>eureka-core</h3><ol><li><code>com.netflix.eureka.aws</code> : 与AWS (Amazon Web Services) 相关，该系列文章暂不涉及AWS的分析</li><li><code>com.netflix.eureka.cluster</code> : 与peer节点复制(replication)相关</li><li><code>com.netflix.eureka.lease</code> : 租约，用来控制注册信息的生命周期(注册、续约、剔除) </li><li><code>com.netflix.eureka.registry</code> : 存储、查询服务注册信息 </li><li><code>com.netflix.eureka.resources</code> : RESTful中的”R”，即资源。相当于SpringMVC中的Controller </li><li><code>com.netflix.eureka.transport</code> : 发送HTTP请求的客户端，如发送心跳 </li><li><code>com.netflix.eureka.util</code> : 相关工具包</li></ol><h3 id="eureka-core-jersey2"><a href="#eureka-core-jersey2" class="headerlink" title="eureka-core-jersey2"></a>eureka-core-jersey2</h3><p>Jersey 框架实现Eureka的 RESTful HTTP接口。Eureka 使用 1.x 版本，2.x 版本由社区实现。</p><h3 id="eureka-examples"><a href="#eureka-examples" class="headerlink" title="eureka-examples"></a>eureka-examples</h3><p>Eureka-Client 使用例子。</p><h3 id="eureka-resources"><a href="#eureka-resources" class="headerlink" title="eureka-resources"></a>eureka-resources</h3><p>通过 JSP 实现 Eureka-Server 的运维后台界面。</p><h3 id="eureka-server"><a href="#eureka-server" class="headerlink" title="eureka-server"></a>eureka-server</h3><p>由 <code>eureka-client</code> + <code>eureka-core</code> + <code>eureka-resources</code> 打包成 Eureka-Server 的war包。</p><h3 id="eureka-server-governator"><a href="#eureka-server-governator" class="headerlink" title="eureka-server-governator"></a>eureka-server-governator</h3><p>使用 Netflix Governator （Google Guice的扩展类库，提供了Classpath扫描及自动绑定、生命周期管理、成员属性验证等功能）管理 Eureka-Server 的生命周期。目前该模块正在测试阶段。</p><h3 id="eureka-test-utils"><a href="#eureka-test-utils" class="headerlink" title="eureka-test-utils"></a>eureka-test-utils</h3><p>Eureka 单元测试工具类。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近关于微服务的话题很火热，本系列文章主要是从源码去解读Eureka。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://yoga0521.github.io/categories/SpringCloud/"/>
    
      <category term="Eureka" scheme="https://yoga0521.github.io/categories/SpringCloud/Eureka/"/>
    
    
      <category term="Eureka" scheme="https://yoga0521.github.io/tags/Eureka/"/>
    
      <category term="SpringCloud" scheme="https://yoga0521.github.io/tags/SpringCloud/"/>
    
      <category term="微服务" scheme="https://yoga0521.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>JPA使用Java8的LocalDateTime</title>
    <link href="https://yoga0521.github.io/2017/12/02/JPA%E4%BD%BF%E7%94%A8Java8%E7%9A%84LocalDateTime/"/>
    <id>https://yoga0521.github.io/2017/12/02/JPA使用Java8的LocalDateTime/</id>
    <published>2017-12-02T14:49:03.000Z</published>
    <updated>2018-04-29T16:24:23.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章主要介绍JPA如何正确使用<code>LocalDateTime</code>与数据库<code>datetime</code>属性进行映射。</p><a id="more"></a><p>对应的JPA版本是2.1以下的，由于JPA2.1发布时间早于Java8，所以不能直接支持Java8的新特新。<strong>Oracle最新发布的JPA2.2版本是支持新的时间API以及查询结果流等。</strong></p><p><code>MyBatis</code>请查看<a href="https://yoga0521.github.io/2017/12/01/MyBatis%E4%BD%BF%E7%94%A8Java8%E7%9A%84LocalDateTime/">MyBatis使用Java8的LocalDateTime</a>。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p><code>spring-boot-starter-data-jpa</code>的版本为<code>1.5.9.RELEASE</code>，对应的<code>hibernate-core</code>版本为<code>5.0.12.Final</code></p><h3 id="将数据保存到数据库"><a href="#将数据保存到数据库" class="headerlink" title="将数据保存到数据库"></a>将数据保存到数据库</h3><ul><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-java8<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.12.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加注解，在获取<code>LocalDateTime</code>时，指定时间格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"id"</span>, nullable = <span class="keyword">false</span>, length = <span class="number">20</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>, locale = <span class="string">"zh"</span>, timezone = <span class="string">"GMT+8"</span>)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"gmt_create"</span>)</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime gmtCreate;</span><br><span class="line">    <span class="comment">//省略get，set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>博主一开始遇到了一个坑，我用的<code>hibernate-java8</code>版本为<code>5.2.8.Final</code>，结果报错了。后来发现这个版本的<code>hibernate-core</code>是<code>5.2.8.Final</code>。后来改成对应的<code>5.0.12.Final</code>就正确了。</p><p>欢迎关注博主其他的文章。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这篇文章主要介绍JPA如何正确使用&lt;code&gt;LocalDateTime&lt;/code&gt;与数据库&lt;code&gt;datetime&lt;/code&gt;属性进行映射。&lt;/p&gt;
    
    </summary>
    
      <category term="JPA" scheme="https://yoga0521.github.io/categories/JPA/"/>
    
    
      <category term="JPA" scheme="https://yoga0521.github.io/tags/JPA/"/>
    
      <category term="Java8" scheme="https://yoga0521.github.io/tags/Java8/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis使用Java8的LocalDateTime</title>
    <link href="https://yoga0521.github.io/2017/12/01/MyBatis%E4%BD%BF%E7%94%A8Java8%E7%9A%84LocalDateTime/"/>
    <id>https://yoga0521.github.io/2017/12/01/MyBatis使用Java8的LocalDateTime/</id>
    <published>2017-12-01T13:42:15.000Z</published>
    <updated>2018-04-29T16:27:58.893Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>众所周知，Java8之前的时间API有很多问题，比如：<strong>非线程安全</strong>，<strong>设计很差</strong>。<strong>时区处理麻烦</strong>。新的时间API（<code>java.time</code>包）解决了这些问题，所以我们在平时开发尽可能的使用新的时间API。但是MyBatis使用<code>LocalDataTime</code>映射到数据库的<code>datetime</code>属性时，会报错。</p><a id="more"></a><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p><code>mybatis-spring-boot-starter</code>的版本为1.3.1，对应的MyBatis版本为<code>3.4.5</code>（版本低于<code>3.4.0</code>还需要特殊配置）</p><h3 id="将数据保存到数据库"><a href="#将数据保存到数据库" class="headerlink" title="将数据保存到数据库"></a>将数据保存到数据库</h3><ul><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- LocalDateTime映射到数据库需要的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-typehandlers-jsr310<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 格式化LocalDateTime需要的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.datatype<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-datatype-jsr310<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加注解，设置时间格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>, locale = <span class="string">"zh"</span>, timezone = <span class="string">"GMT+8"</span>)</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime gmtCreate;</span><br><span class="line">    <span class="comment">//省略get，set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>关于MyBatis使用<code>LocalDateTime</code>的内容就是上面这些了，如果使用的ORM框架式JPA，请点击<a href="https://yoga0521.github.io/2017/12/02/JPA%E4%BD%BF%E7%94%A8Java8%E7%9A%84LocalDateTime/">JPA使用Java8的LocalDateTime</a>。</p><p>欢迎关注博主其他的文章。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;众所周知，Java8之前的时间API有很多问题，比如：&lt;strong&gt;非线程安全&lt;/strong&gt;，&lt;strong&gt;设计很差&lt;/strong&gt;。&lt;strong&gt;时区处理麻烦&lt;/strong&gt;。新的时间API（&lt;code&gt;java.time&lt;/code&gt;包）解决了这些问题，所以我们在平时开发尽可能的使用新的时间API。但是MyBatis使用&lt;code&gt;LocalDataTime&lt;/code&gt;映射到数据库的&lt;code&gt;datetime&lt;/code&gt;属性时，会报错。&lt;/p&gt;
    
    </summary>
    
      <category term="MyBatis" scheme="https://yoga0521.github.io/categories/MyBatis/"/>
    
    
      <category term="Java8" scheme="https://yoga0521.github.io/tags/Java8/"/>
    
      <category term="MyBatis" scheme="https://yoga0521.github.io/tags/MyBatis/"/>
    
  </entry>
  
</feed>
